/** @module FormTextInput.styles
 *  @since 2020.10.07, 00:20
 *  @changed 2021.01.29, 00:54
 */

.FormTextInput {
  // NOTE: FormItem is inherited
  border-color: $formItemBorderColor;
  input&-Control {
    // box-shadow: inset 0 0 1px red; // DEBUG
    // @mixin FormItemTextControlMixin; // UNUSED
    padding: 0 $(formItemInnerPaddingH)px;
    box-sizing: border-box;
    width: 100%;
    height: $(formItemInnerHeight)px;
    line-height: $(formItemInnerHeight)px;
    background: none;
    border: none;
    outline: 0;
    display: block;
    color: $formItemTextColor;
    overflow: hidden;
    &::placeholder {
      color: $formItemPlaceholderColor;
    }
    &:focus {
      outline: 0;
    }
    &::-ms-reveal,
    &::-ms-clear {
      display: none;
    }
    // padding: 0;
    // margin: 0;
    // outline: none;
    &:-internal-autofill-previewed,
    &:-internal-autofill-selected,
    &:-webkit-autofill:active,
    &:-webkit-autofill:hover,
    &:-webkit-autofill:focus,
    &:-webkit-autofill {
      // Override autofill font-size styles?
      outline: none;
      overflow: hidden;
      border: none;
      font-family: $defaultFont !important;
      font-size: $(defaultFontSize)px !important;
      -webkit-text-fill-color: $formItemTextColor;
      background: none; // ???
      -webkit-box-shadow: 0 0 0px 1000px transparent inset;
      -webkit-background-clip: text !important;
    }
  }
  &_hasIcon { // ???
    position: relative;
    & input^&-Control {
      padding-right: 30px;
    }
    & ^&-Icon {
      position: absolute;
      right: 8px;
      top: 6px; // ???
      opacity: .7;
      cursor: pointer;
      &:hover { // Check for `disabled`?
        opacity: .9;
      }
    }
  }

  // Frame...

  background-color: #fff;

  transition: box-shadow $(transitionTime)ms;

  @define-mixin styledTextInput $borderColor, $glowColor {
    $hoveredBorderColor: color($borderColor shade(10));
    $activeBorderColor: color($glowColor shade(15));
    $hoveredFocusedBorderColor: color($activeBorderColor shade(5));
    $hoveredGlowColor: color($borderColor alpha(1));
    $activeGlowColor: color($glowColor alpha(.8));
    @mixin FormItemFrame $borderColor, $(formItemBorderSize)px, 0px;
    // @define-mixin FormItemFrame $borderColor, $innerSize, $innerGlowSize, $outerGlowColor, $outerSize, $outerGlowSize
    &.FormItem_hovered {
      @mixin FormItemFrame $hoveredBorderColor, $(formItemBorderSize)px, 1px, $hoveredGlowColor, 0px, $(formItemOuterGlow)px;
      // @mixin FormItemFrame $hoveredBorderColor, $(formItemBorderSize)px, 1px, $hoveredGlowColor, 0px, $(formItemOuterGlow)px;
    }
    &.FormItem_focused {
      @mixin FormItemFrame $activeBorderColor, $(formItemBorderSize)px, 1px, $activeGlowColor, 0px, 1px;
    }
    &.FormItem_focused.FormItem_hovered {
      // @mixin FormItemFrame $activeBorderColor, $(formItemBorderSize)px, 1px, $activeGlowColor, 1px, $(formItemOuterGlow)px;
      @mixin FormItemFrame $hoveredFocusedBorderColor, $(formItemBorderSize)px, 1px, $activeGlowColor, 1px, $(formItemOuterGlow)px;
    }
    & > .FormTextInput-Icon {
      color: $borderColor;
    }
  }

  $borderColor: $formItemBorderColor;
  $glowColor: $formItemGlowColor;
  @mixin styledTextInput $borderColor, $glowColor;

  // Themes...

  &_theme {
    &_primary {
      @mixin styledTextInput $primaryColor, $primaryColor;
    }
    &_secondary {
      @mixin styledTextInput $secondaryColor, $secondaryColor;
    }
    // Theme colors...
    @each $color $name in $themeColors {
      &_$(name) {
        @mixin styledTextInput $color, $color;
      }
    }
  }
}

